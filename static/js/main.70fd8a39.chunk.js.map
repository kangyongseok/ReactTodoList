{"version":3,"sources":["component/TodoListTemplate.js","component/Form.js","component/TodoItem.js","component/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","_this$props","this","props","text","onToggle","id","checked","onRemove","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_component_TodoItem","key","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","selected","nextTodes","Object","toConsumableArray","objectSpread","handleRemove","filter","_this$state2","src_component_TodoListTemplate","src_component_Form","component_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70fd8a39.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\n\r\n\r\nconst TodoListTemplate = ({form, children}) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘할일\r\n            </div>\r\n            <section className=\"form-area\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todo-list-area\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default TodoListTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"form\">\r\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} />\r\n            <div className=\"create-button\" onClick={onCreate}>\r\n                추가\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component {\r\n    render() {\r\n        const { text, onToggle, id, checked, onRemove } = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\r\n                <div className=\"remove\" \r\n                    onClick={(e) => {e.stopPropagation(); onRemove(id)}}>&times;</div>\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">&#x2713;</div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoItemList extends Component {\r\n    render() {\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map(({id, text, checked}) => (\r\n            <TodoItem \r\n                id={id}\r\n                text={text}\r\n                checked={checked}\r\n                key={id}\r\n                onToggle={onToggle}\r\n                onRemove={onRemove}\r\n            />\r\n        ));\r\n        return (\r\n                <div>\r\n                    {todoList}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItemList;","import React, { Component } from 'react';\nimport TodoListTemplate from './component/TodoListTemplate';\nimport Form from './component/Form';\nimport TodoItemList from './component/TodoItemList';\n\n\nclass App extends Component {\n\n  // 초기 state 값 설정\n  id = 3\n\n  state ={\n    input: '',\n    todos: [\n      { id: 0, text: ' 리액트소개', checked: false },\n      { id: 1, text: ' 리액트소개', checked: true },\n      { id: 2, text: ' 리액트소개', checked: false }\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  handleCreate = () => {\n    const  { input, todos } = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const nextTodes = [...todos];\n\n    nextTodes[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodes\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <div className=\"App\">\n        <TodoListTemplate form={\n          <Form \n            value={input}\n            onKeyPress={handleKeyPress}\n            onChange={handleChange}\n            onCreate={handleCreate}\n          />\n        }>\n          <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove} />\n        </TodoListTemplate>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}